function sysCall_init() 
    -- User Parameters
    beltSpeed = 0.4
    T_insert = 1
    insertCoordinate = {-1.3,-0.5,0.25} 
    goodPercentage = 0.19   
    goodColor = {0.345,0.859,0.192}    

    -- Initialize auxiliary variables
    T_last_inserted = 0     
    deltaTime = 0
    hasStopped = false
    boxList = {}
    boxDummyList = {}
    boolList = {}

    -- Initialize handles, set beltSpeed
    box = sim.getObjectHandle("Box")
    boxDummy = sim.getObjectHandle("BoxDummy")

    forwarder=sim.getObjectHandle('ConveyorBelt_forwarder')  	-- 컨베이어벨트의 pure object  
    proximity = sim.getObjectHandle("Proximity_sensor_belt1")   -- 센서

    belt2script = sim.getScriptHandle("customizableConveyor")	-- customizableConveyor 스크립트의 핸들을 belt2script 변수에 초기화

    sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)	-- 자신(conveyor belt)의 스크립트 핸들, conveyorBeltVelocity 변수 값을 beltSpeed(0.4) 로 초기화(글로벌 변수 선언?)


    -- Insert the first box during initializiation
    insertBox()		-- 새로운 box 오브젝트의 insert 함수(아래에 정의)

    -- Get handles and postions of dummies
    targetDummy = sim.getObjectHandle("Target")		-- IK를 위한 핸들,  Target은 로봇 그리퍼의 위치
    idlePos = sim.getObjectPosition(targetDummy,-1)		-- 그리퍼의 coordinate(-1 은 global coordinate)
    idleOrient = sim.getObjectOrientation(targetDummy,-1)	-- 그리퍼의 orientation

    releasePosHandle = sim.getObjectHandle("releasePos")	-- 박스를 놓을 위치(releasePos)의 핸들
    releasePos = sim.getObjectPosition(releasePosHandle,-1)	-- releasePos의 coordinate(global)
    releaseOrient = sim.getObjectOrientation(releasePosHandle,-1)	-- releasePos의 orientation(global)
    
    -- Get release path handle
    releasePath = createPath("releasePath",idlePos,idleOrient,releasePos,releaseOrient)		-- releasePath라는 경로 생성(idelPos -> releasePos)(함수는 아래에 정의)

    -- Get robot script handle
    robotScriptHandle = sim.getScriptHandle("LBR_iiwa_14_R820")		-- robot의 script 핸들
    sim.setScriptVariable("releasePath",robotScriptHandle,releasePath)		-- robot script에서 releasePath라는 변수 설정(releasePath의 핸들을 넘겨줌)

    -- Create "Dummy Path" (will be removed)
    path = sim.createPath(1);		-- path 생성, 및 attribute = 1 (무슨 의미?)
    sim.setObjectName(path,"pickupPath")	-- pickupPath 라는 오브젝트 생성

end

function sysCall_cleanup() 
 
end 

function sysCall_actuation() 
    beltVelocity=sim.getScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity")	-- init()에서 설정한 conveyorBeltVelocity 변수를 가져옴
    
    -- Here we "fake" the transportation pads with a single static rectangle that we dynamically reset
    -- at each simulation pass (while not forgetting to set its initial velocity vector) :
    
    relativeLinearVelocity={beltVelocity,0,0}		-- 상대속도 설정
    -- Reset the dynamic rectangle from the simulation (it will be removed and added again)
    sim.resetDynamicObject(forwarder)		-- forwarder 의 다이나믹 리셋
    -- Compute the absolute velocity vector:
    m=sim.getObjectMatrix(forwarder,-1)		-- forwarder의 Homogeneous matrix 
    m[4]=0 -- Make sure the translation component is discarded		-- x - translation 0로 설정
    m[8]=0 -- Make sure the translation component is discarded		-- y - 
    m[12]=0 -- Make sure the translation component is discarded		-- z - 
    absoluteLinearVelocity=sim.multiplyVector(m,relativeLinearVelocity)		-- 회전행렬과 relativeVel 곱 -> absVel
    -- Now set the initial velocity of the dynamic rectangle:
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_x,absoluteLinearVelocity[1])	-- 컨베이어벨트의 속도 설정
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_y,absoluteLinearVelocity[2])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_z,absoluteLinearVelocity[3])
end 



function sysCall_sensing() 
    -- Read Proximity sensor (0= nothing detected, 1 = object detected)
    local res = sim.readProximitySensor(proximity)	-- proximity 센서의 detection 여부 판별을 위한 변수 설정

    -- Check if possible to insert an new box
    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then	-- 컨베이어벨트가 작동중일 때, 1초마다 box생성 및 삽입
        insertBox()
    end

    -- If proximity sensor detects an object, stop the belt, stop inserting objects
    if res == 1 and not hasStopped then		-- box 가 감지되고, 켄베이어벨트가 작동중일 때
        if boolList[1] then			-- good box 이면
            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)		-- 컨베이어 속도 0으로 설정
            deltaTime = sim.getSimulationTime()-T_last_inserted		-- 박스가 마지막으로 삽입되고 얼마나 시간이 흘렀는지 deltaTime 설정
            hasStopped = true		-- 컨베이어벨트가 정지됐음을 선언

	    -- Generate new pickupPath
            updatePickupPath(boxDummyList[1])	-- pickupPath 를 업데이트(아래에 함수 정의)
	    -- Remove first object and dummy handle from table
            objs = removeFirstObject()		-- removeFirstObject 함수 실행(아래에 함수 정의)
	    -- Set pickupDummy-handle in robot script
            sim.setScriptVariable("pickupDummy",robotScriptHandle,objs[2])	-- 로봇 스크립트에 objs[2] 값을 가지는 "pickupDummy" 변수 생성
	    -- Set a signal such that robot knows that object is available
            sim.setIntegerSignal("objectAvailable",1)		-- 1을 값으로 가지는 "ObjectAvailable" 라는 integer signal 생성, 로봇이 물체를 집기 위해 이 신호를 기다림
        else		-- good box 가 아니면
            local box = table.remove(boxList,1)		-- boxList 에서 첫번째 box 삭제 및 핸들 반환
            local boxDummy = table.remove(boxDummyList,1)	-- boxDummyList에서 첫번재 dummy 삭제 및 핸들 반환
            table.remove(boolList,1)		-- boolList 에서 판별값 삭제

            sim.removeObject(box)	-- 해당 box 오브젝트 삭제
            sim.removeObject(boxDummy)	-- 해당 dummy 오브젝트 삭제
        end
    end

    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting
    if res == 0 and hasStopped then	-- 벨트 정지, 감지 x 이면(good box가 로봇에 의해 제거 됐을 때)
        sim.clearIntegerSignal("objectAvailable")	-- integer signal 삭제
        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)	-- 컨베이어벨트 재가동(속도= belfSpeed)
        hasStopped = false		-- 가동됨을 선언
        T_last_inserted = sim.getSimulationTime()-deltaTime	-- 현 시간에서 정지됐을 때 소요된 시간을 빼 줌
    end
end

function removeFirstObject()
    -- Obtain handles by removing from tables
    local box = table.remove(boxList,1)		-- 로봇이 집을 box 리스트에서 제거 및 핸들 반환
    local boxDummy = table.remove(boxDummyList,1)	-- dummy 리스트에서 제거 및 핸들 반환
    table.remove(boolList,1)		-- 판별값 리스트에서 제거 및 핸들 반환

    -- Add handles to the belt2 tables
    sim.callScriptFunction("addObject",belt2script,{box,boxDummy})	-- belt2script 의 "addObject"함수 호출 및 {box, boxDummy} 인자 전달 

    -- Return handles
    return {box,boxDummy}	-- box, boxDummy 핸들 반환
end

function insertBox()
    -- Generate random numbers
    local rand1 = math.random()	-- box를 넣을 위치, 색상에 random noise 설정을 위함
    local rand2 = math.random()
    local rand3 = math.random()

    -- Generate random disturbances on position and orientation
    local dx = (2*rand1-1)*0.1		-- radom noise 포함한 위치 값
    local dy = (2*rand2-1)*0.1
    local dphi = (2*rand3-1)*0.5
    local disturbedCoordinates = {0,0,0}	-- 최종 위치 계산
    disturbedCoordinates[1] = insertCoordinate[1]+dx
    disturbedCoordinates[2] = insertCoordinate[2]+dy
    disturbedCoordinates[3] = insertCoordinate[3]

    -- Copy and paste box and boxDummy
    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)	-- box, boxdummy 오브젝트 복사

    -- Update last inserted box time
    T_last_inserted = sim.getSimulationTime()		-- insert 된 시간 

    -- Move and rotate
    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)		-- box 위치 변경
    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})
  
    -- Store handles to boxes and dummies
    table.insert(boxList,insertedObjects[1])		-- boxList 에 box 추가
    table.insert(boxDummyList,insertedObjects[2]) 	-- boxDummyList에 dummy 추가

    -- Decide if object is good or bad
    local decision = math.random() 	-- good/bad 퀄리티 설정을 위한 random number
    if decision <= goodPercentage then	-- decision 이 goodPercentage(0.19) 보다 작으면 
	-- Object is good, assign goodColor
        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)		-- box 색을 goodColor로 변경 
        table.insert(boolList,true)		-- 퀄리티 판별을 위한 boolList 에 업데이트(True)
    else
	-- Object is bad, assign random color
        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})	-- box 색을 random 하게 변경
        table.insert(boolList,false)		-- 퀄리티 판별을 위한 boolList 에 업데이트(False)
    end
    
end

function createPath(name,startPoint,startOrient,endPoint,endOrient)
    -- Create Path Object
    local path = sim.createPath(1)

    -- Create buffer variables
    -- https://www.coppeliarobotics.com/helpFiles/en/regularApi/simInsertPathCtrlPoints.htm 참고
    local buffer = {startPoint[1],startPoint[2],startPoint[3],startOrient[1],startOrient[2],startOrient[3], 1,0,0,0,0,
                    endPoint[1],endPoint[2],endPoint[3],endOrient[1],endOrient[2],endOrient[3],             1,0,0,0,0}
	

    -- Insert 2 control points (start and endpoint)
    sim.insertPathCtrlPoints(path,0,0,2,buffer)		-- (path, option(bit0), startindex(0), ptCnt(2), buffer)

    -- Rename the object
    sim.setObjectName(path,name)	-- path 값을 갖는 object "name" 생성 
    -- Return handle to path
    return path				-- path 반환
end

function updatePickupPath(dummy)
    -- Obtain handle to last pickupPath
    local path = sim.getObjectHandle("pickupPath")	-- pickupPath 핸들을 가져와서
    -- Remove the path
    sim.removeObject(path)		-- path 를 삭제하고
    -- Obtain position of dummy to be reached
    local dummyPos = sim.getObjectPosition(dummy,-1)		-- dummy의 pos
    -- Obtain orientation of dummy to be reached
    local dummyOrient = sim.getObjectOrientation(dummy,-1)	-- dummy의 ori
    -- Create new path
    createPath("pickupPath",idlePos,idleOrient,dummyPos,dummyOrient)	-- 새로운 path 생성, "pickupPath"에 초기화
end

