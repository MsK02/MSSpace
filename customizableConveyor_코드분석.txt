function sysCall_init() 
    -- Parameters
    beltSpeed = 0.1		-- 컨베이어 속도 설정 0.1m/s

    -- Initialize auxiliary variables
    boxList = {}	-- boxList 생성
    boxDummyList = {}	-- boxDummyList 생성

    -- Get object and script handles
    forwarder=sim.getObjectHandle('customizableConveyor_forwarder')	-- pure object 핸들 forwarder에 초기화
    textureShape=sim.getObjectHandle('customizableConveyor_tableTop')	-- 이동하는 벨트 부분 핸들 textrueShape에 초기화 

    proximity1 = sim.getObjectHandle("Proximity_sensor_belt2_1")	-- proximity sensor1
    proximity2 = sim.getObjectHandle("Proximity_sensor_belt2_2")	-- proximity sensor2

    belt1_script = sim.getScriptHandle("ConveyorBelt")		-- ConveyorBelt의 스크립트 핸들 belt1_script 에 초기화
    
    -- Set belt2 speed
    sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)		-- userParameter인 conveyorBeltVelocity 에 컨베이어 속도 초기화
end

function sysCall_cleanup() 
 
end 

function sysCall_actuation() 
-- 컨베이어 벨트의 움직임 만들어주는 기능, ConveyorBelt 스크립트의 내용과 비슷
--- THIS IS NOT PART OF THE TUTORIAL. IT COMES ALREADY WITH THE CONVEYOR BELT!
--- DO NOT MODIFY THIS FUNCTION!
    beltVelocity=sim.getScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity")
    
    -- We move the texture attached to the conveyor belt to give the impression of movement:
    t=sim.getSimulationTime()
    sim.setObjectFloatParameter(textureShape,sim.shapefloatparam_texture_x,t*beltVelocity)
    
    -- Here we "fake" the transportation pads with a single static rectangle that we dynamically reset
    -- at each simulation pass (while not forgetting to set its initial velocity vector) :
    relativeLinearVelocity={beltVelocity,0,0}
    -- Reset the dynamic rectangle from the simulation (it will be removed and added again)
    sim.resetDynamicObject(forwarder)
    -- Compute the absolute velocity vector:
    m=sim.getObjectMatrix(forwarder,-1)
    m[4]=0 -- Make sure the translation component is discarded
    m[8]=0 -- Make sure the translation component is discarded
    m[12]=0 -- Make sure the translation component is discarded
    absoluteLinearVelocity=sim.multiplyVector(m,relativeLinearVelocity)
    -- Now set the initial velocity of the dynamic rectangle:
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_x,absoluteLinearVelocity[1])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_y,absoluteLinearVelocity[2])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_z,absoluteLinearVelocity[3])
end 


function sysCall_sensing()
    -- Read proximity sensors (0 = no detection, 1 = detected object)
    local prox1 = sim.readProximitySensor(proximity1)	-- sensor1 의 detection 
    local prox2 = sim.readProximitySensor(proximity2)	-- sensor2 의 detection

    -- Start belt if object detectet by prox1, stop belt if no objet at prox2
    if prox1==1 then		-- sensor1 이 감지하는 동안
        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)	-- 컨베이어를 움직이고
    else	-- sensor1의 감지를 벗어나면
        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)		-- 컨베이어를 멈춘다
    end
    
    -- Remove object if detected by prox2
    if prox2 == 1 then		-- sensor2가 감지하면
        removeObject()		-- object 삭제 
    end
end

function addObject(obj)		-- 박스와 더미를 추가하는 함수 (ConveyorBelt 의 스크립트에서 호출되는 함수, 여기 스크립트에서는 안 쓰인다)
    -- Insert box and boxDummy handle at the end of tables
    table.insert(boxList,obj[1])	-- boxList 에 box 추가
    table.insert(boxDummyList,obj[2])	-- boxDummyList 에 dummy 추가
end

function removeObject()
    -- Remove first objects from tables, then remove objects from scene
    sim.removeObject(table.remove(boxList,1))		-- boxList에서 box 삭제 및 오브젝트 삭제
    sim.removeObject(table.remove(boxDummyList,1))	-- boxDummyList에서 dummy 삭제 및 오브젝트 삭제
end